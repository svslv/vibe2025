
#import "@local/suai-state-standard:4.0.0" as gost
#show: gost.template
#set enum( full: true, numbering: "1.")

#align(center)[*Отчёт о разработке проекта «To-Do List + Telegram-бот»*]

= Цель работы

Целью данной лабораторноя работы является вайб-формирование полноценного приложения «To-Do List» с поддержкой:
+ базовых CRUD-операций (создание, чтение, обновление, удаление задач);
+ авторизации пользователей;
+ управления задачами через Telegram-бота;
+ контейнеризации всех компонентов в Docker.

= Структура итогового репозитория

#table(
  columns: 3,
  align: center,

  table.header(
    [*Файл*], [*Назначение*], [*Ключевые особенности*],
  ),

  [.env], [конфигурация], [логин, пароль, DB, HOST, PORT, BOT_TOKEN],
  [server.js], [чистый Node.js-сервер], [статическая раздача, сессии, REST API],
  [bot.js], [Telegram-бот], [команды `/add /help /list /edit /delete`],
  [db.sql], [инициализация БД], [таблица items],
  [Dockerfile], [образ Node.js], [установка зависимостей, запуск],
  [docker-compose.yml], [оркестрация, контейнеризация], [контейнеры: app, bot, db, nginx],
  [nginx.conf], [реверс-прокси], [proxy → app:3000, порт host NGINX_PORT],
  [index.html], [UI списка задач], [AJAX fetch, credentials = include],
  [login.html], [форма входа], [передача username / password]
)

\

= Ход работы

== Инициализация репозитория и базовый CRUD

+ Создана таблица `items` в MySQL, поля: id INT AUTO_INCREMENT, text VARCHAR.
+ Реализованы маршруты:
  + `GET /api/items` → список задач.
  + `POST /api/add` → добавление новой записи.
  + `POST /api/delete` → удаление по id.
  + `POST /api/edit` → обновление текста по id.

== Авторизация и сессии

+ `POST /login` проверяет учётные данные из .env.
+ При успехе создаётся cookie `sid`; сессии хранятся в Map на памяти.
+ `GET /logout` удаляет cookie и запись Map.
+ Все маршруты `/api/*` возвращают 401, если нет действующей сессии.

== Фронтенд

+ `index.html` формирует таблицу задач.
+ AJAX-запросы выполняются с `credentials: "include"` → cookie отправляется автоматически.
+ При ответе 401 страница перенаправляется на `/login.html`.

== Telegram-бот

+ Библиотека node-telegram-bot-api.
+ Подключается к той же БД:
  + `/add текст` → INSERT.
  + `/list` → SELECT.
  + `/edit id новый текст` → UPDATE.
  + `/delete id` → DELETE.
+ Бот работает в режиме polling, чат определяется по `msg.chat.id`.

== Контейнеризация Docker

+ *db* → mysql:8.0, том `db-data`, примонтирован `db.sql` в `/docker-entrypoint-initdb.d/`.
+ *app* → образ Node.js 18 alpine, запускает `server.js`.
+ *bot* → отдельный образ Node.js, запускает `bot.js`.
+ *nginx* → ревёрс-прокси, пробрасывает `$NGINX_PORT:8080`.
+ Переменные окружения подключаются через файл `.env`.

== Рефакторинг

+ Заново реализованы:
  + парсинг URL и тела запросов;
  + статическая отдача файлов;
  + куки и сессионный механизм;

= Выводы

Работа полностью реализовала цели:
+ Сервер написан на чистом Node.js, что позволило минимизировать зависимости и лучше понять механизмы HTTP.
+ Реализована защищённая авторизация, CRUD API и удобный фронтенд.
+ Telegram-бот расширил каналы взаимодействия.
+ Docker-контейнеры обеспечили воспроизводимость и простое развёртывание.

Система готова к дальнейшему развитию — добавлению регистрации, роли пользователей, разграничению доступа и CI/CD-деплоя на VPS.

#align(center)[_Весь код и сам Typst отчёт навайблены с помощью ChatGPT и доработаны вручную_]





