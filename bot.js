// bot.js ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç –¥–ª—è ToDo

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mysql       = require('mysql2/promise');

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL (—Ç–∞ –∂–µ, —á—Ç–æ –∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)
const dbConfig = {
  host:     process.env.DB_HOST,
  user:     process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
};

// –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
const HELP = `
*ToDo-–±–æ—Ç* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!  
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ /add _—Ç–µ–∫—Å—Ç_ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É  
‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏  
‚Ä¢ /edit _id_ _–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç_ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É  
‚Ä¢ /delete _id_ ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
`;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ /help
bot.onText(/\/(start|help)/, msg => {
  bot.sendMessage(msg.chat.id, HELP, { parse_mode: 'Markdown' });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: /add —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
bot.onText(/\/add (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const text = match[1].trim();
  if (!text) {
    return bot.sendMessage(chatId, '‚ùóÔ∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
  }
  try {
    const conn = await mysql.createConnection(dbConfig);
    const [result] = await conn.execute(
      'INSERT INTO items (text) VALUES (?)',
      [text]
    );
    await conn.end();
    bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º *${result.insertId}*.`,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    console.error('Error INSERT:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
});

// –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: /list
bot.onText(/\/list/, async msg => {
  const chatId = msg.chat.id;
  try {
    const conn = await mysql.createConnection(dbConfig);
    const [rows] = await conn.execute(
      'SELECT id, text FROM items ORDER BY id'
    );
    await conn.end();
    if (rows.length === 0) {
      return bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.');
    }
    const text = rows.map(r => `*${r.id}*. ${r.text}`).join('\n');
    bot.sendMessage(chatId, `üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n${text}`, {
      parse_mode: 'Markdown'
    });
  } catch (err) {
    console.error('Error SELECT:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.');
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: /edit id –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
bot.onText(/\/edit (\d+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const id = parseInt(match[1], 10);
  const newText = match[2].trim();
  if (!newText) {
    return bot.sendMessage(chatId, '‚ùóÔ∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
  }
  try {
    const conn = await mysql.createConnection(dbConfig);
    const [result] = await conn.execute(
      'UPDATE items SET text = ? WHERE id = ?',
      [newText, id]
    );
    await conn.end();
    if (result.affectedRows === 0) {
      return bot.sendMessage(
        chatId,
        `‚ùì –ó–∞–¥–∞—á–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`
      );
    }
    bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–¥–∞—á–∞ *${id}* –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    console.error('Error UPDATE:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ: /delete id
bot.onText(/\/delete (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const id = parseInt(match[1], 10);
  try {
    const conn = await mysql.createConnection(dbConfig);
    const [result] = await conn.execute(
      'DELETE FROM items WHERE id = ?',
      [id]
    );
    await conn.end();
    if (result.affectedRows === 0) {
      return bot.sendMessage(
        chatId,
        `‚ùì –ó–∞–¥–∞—á–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`
      );
    }
    bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ *${id}* —É–¥–∞–ª–µ–Ω–∞.`, {
      parse_mode: 'Markdown'
    });
  } catch (err) {
    console.error('Error DELETE:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
});

// –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', msg => {
  const text = msg.text || '';
  if (!/^\/(add|list|edit|delete|start|help)/.test(text)) {
    bot.sendMessage(
      msg.chat.id,
      '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
    );
  }
});
